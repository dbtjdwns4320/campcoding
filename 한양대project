#class Pitcher선언
class Pitcher:
    def __init__(self):
        self.Team_name = {}
        self.people_name = {}

    # 매 경기마다 투수의 기록을 입력
    # Win = 승리 / Lose = 패배 / Innings = 이닝 / Strikeout = 탈삼진 / Baseobballs = 볼넷 / Losspoint = 실점
    # 매 경기마다 기록이 누적되어야 함.
    def Update_stats(self,team,name):
        flag = 0
        for i in self.Team_name[team]:
            if i == name:
                flag = 1
        
        if flag:
            try:
                temp = self.people_name[name]
                temp[0] += int(input("Win? (1/0) : "))
                temp[1] += int(input("Lose? (1/0) : "))
                B = float(input(("Innings? : ")))
                temp[2] += B
                temp[3] += int(input("K? : "))
                temp[4] += int(input("BB? : "))
                A = int(input("Losspoints? : "))
                temp[5] += A
                temp[6] += (temp[2]/temp[5])*9
                self.people_name[name] = temp
            except:
                print("다시입력")
        else:
            print("다시입력")

# Team 이라는 dictionary를 선언
# Key 값은 팀 이름, value 값은 팀에 소속되어 있는 선수 이름.
    def Team(self):
        try:
            N = int(input("몇 팀이 있나?: "))
            M = int(input("투수는 몇 명이 있나?: "))
        except:
            print("숫자로 입력하세요")
        for i in range(N):
            temp_Team_name = input("팀 이름을 입력하시오: ")
            self.Team_name.setdefault(temp_Team_name)
            temp_asd = []
            for k in range(M):
                temp_qqq = input("투수 이름을 입력하시오: ")
                temp_asd.append(temp_qqq)
                self.people_name.setdefault(temp_qqq)
                self.people_name[temp_qqq] = [0,0,0,0,0,0,0]
            self.Team_name[temp_Team_name] = temp_asd
            print(self.Team_name)
    
    def Display_all_pitcher(self):
        for i in sorted(self.people_name.items() ,key=lambda x:(x[1][6],x[1][0]),reverse=True):
            temp = ""
            for key , value in self.Team_name.items():
                if i[0] in index:
                    temp = key
            print("팀:",temp)
            print("투수:",i[0])
            print("win:",i[1][0])
            print("Lose:",i[1][1])
            print("innings:",i[1][2])
            print("k:",i[1][3])
            print("BB:",i[1][4])
            print("losspoints:",i[1][5])
            print("ERA:",i[1][6])
            print("\n")
                
    def Display_a_team(self):    
        for key ,value in self.Team_name.items():
            print("팀:",key)
            print("선수",value)


    def Retrieve_a_pitcher(self,name):
        temp = ""
        for key,value in self.Team_name.items():
            flag = 0
            if name in value:
                flag = 1
                temp = key
        if flag :
            for i in self.people[name]:
                print("팀:",temp)
                print("투수:",name)
                print("win:",i[0])
                print("Lose:",i[1])
                print("innings:",i[2])
                print("k:",i[3])
                print("BB:",i[4])
                print("losspoints:",i[5])
                print("ERA:",i[6])
                print("\n")
        else:
            print("다시입력")
    
    def Modify_a_pitcher(self,name):
        try:
            temp = []
            temp.append(int(input("Win? : ")))
            temp.append(int(input("Lose? : ")))
            B = float(input(("Innings? : ")))
            temp.append(B)
            temp.append(int(input("K? : ")))
            temp.append(int(input("BB? : ")))
            A = int(input("Losspoints? : "))
            temp.append(A)
            temp.append((A/B)*9)
            self.people_name[name] = temp
            print(self.people_name)
        except:
            print("다시입력")
            
            
        
      
    
# 투수별로 방어율 순위를 계산해주는 함수.
# 최종적으로 방어율에 따라 print했을 때 순위가 메겨짐.
# 방어율이 같은 경우 투수의 승리 횟수에 따라 순위 결정.
#def Update_Era_ranking(self):
      

# Menu를 구성하는 함수.
# (1)번 동작 시 투수의 소속 팀과 이름을 입력해 객체를 생성함.
# (2)번 동작 시 (1)번에서 생성한 투수의 객체에 대한 정보 (승, 패, 이닝, 탈삼진 ...) 등을 기록하고 저장함.
# (2)번에서 (1)번에서 입력하지 않은 투수 객체의 이름을 입력하면, 다시 입력하라는 메세지 출력.
# (3)번 동작 시 Team이라는 dictionary 안에 들어있는 Value 값인 투수의 이름과 기록을 출력함. 이때 방어율 순서대로 출력됨.
# 방어율이 같을 경우 기록한 승리 횟수에 따라 출력되는 순서가 달라짐.
# (4)번 동작 시 Team이라는 dictionary 안에 들어있는 Key 값인 팀 이름과 소속되어있는 투수 이름, 기록을 출력함.
# (5)번 동작 시 이름을 입력해 투수의 기록을 확인할 수 있음.
# (6)번 동작 시 (2)번에서 입력했던 투수의 기록을 수정할 수 있음.
# (99)번 동작 시 프로그램 종료.
def display_menu():
    print()
    print("Select Operation?")
    print("============================")
    print("New pitcher generation (1)")
    print("Update a pitcher (2)")
    print("Display all pitchers (3)")
    print("Display a team (4)")
    print("Retrieve a pitcher (5)")
    print("Modify a pitcher (6)")
    print("Exit (99)")
    print("============================")
    A = int(input("Operation(1~6)?: "))
    print("============================")
    return A


while True:
    A = display_menu()
    if 1 <= A and A <= 9:
        if A == 1:
            temp = Pitcher()
            temp.Team()

        elif A == 2:
            team = input("팀 명을 입력하시오: ")
            name = input("투수의 이름을 입력하시오: ")
            temp.Update_stats(team,name)
            
        elif A == 3:
            temp.Display_all_pitcher()
            
        elif A == 4:
            print("팀과 소속 선수를 표시합니다.")
            temp.Display_a_team()

        elif A == 5:
            Retrieve_a_pitcher(input("찾고싶은 투수의 이름을 입력하시오: "))
            

        elif A == 6:
            print("투수의 정보를 수정합니다.")
            name = input("수정하고 싶은 투수의 이름을 입력하시오: ")
            Modify_a_pitcher(self,name)

        elif A > 7:
            print("잘못 입력했습니다. 숫자를 다시 입력하세요 (1~6).")

        elif A == 99:
            print("프로그램을 종료합니다.")
            break

    else :
        print("잘못 입력했습니다. 숫자를 다시 입력하세요 (1~6).")
